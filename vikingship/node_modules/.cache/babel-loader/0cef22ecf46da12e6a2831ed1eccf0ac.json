{"ast":null,"code":"import _defineProperty from \"/Users/xhzy/Desktop/vikingship/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/xhzy/Desktop/vikingship/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/xhzy/Desktop/vikingship/src/components/Upload/upload.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useState } from 'react';\nimport axios from 'axios';\nimport UploadList from './uploadList';\nimport Dragger from './dragger';\nexport const Upload = props => {\n  const action = props.action,\n        defaultFileList = props.defaultFileList,\n        beforeUpload = props.beforeUpload,\n        onProgress = props.onProgress,\n        onSuccess = props.onSuccess,\n        onError = props.onError,\n        onChange = props.onChange,\n        onRemove = props.onRemove,\n        name = props.name,\n        headers = props.headers,\n        data = props.data,\n        withCredentials = props.withCredentials,\n        accept = props.accept,\n        multiple = props.multiple,\n        children = props.children,\n        drag = props.drag;\n  const fileInput = useRef(null);\n\n  const _useState = useState(defaultFileList || []),\n        _useState2 = _slicedToArray(_useState, 2),\n        fileList = _useState2[0],\n        setFileList = _useState2[1];\n\n  const updateFileList = (updateFile, updateObj) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === updateFile.uid) {\n          return _objectSpread({}, file, {}, updateObj);\n        } else {\n          return file;\n        }\n      });\n    });\n  };\n\n  const handleClick = () => {\n    if (fileInput.current) {\n      fileInput.current.click();\n    }\n  };\n\n  const handleFileChange = e => {\n    const files = e.target.files;\n\n    if (!files) {\n      return;\n    }\n\n    uploadFiles(files);\n\n    if (fileInput.current) {\n      fileInput.current.value = '';\n    }\n  };\n\n  const handleRemove = file => {\n    setFileList(prevList => {\n      return prevList.filter(item => item.uid !== file.uid);\n    });\n\n    if (onRemove) {\n      onRemove(file);\n    }\n  };\n\n  const uploadFiles = files => {\n    let postFiles = Array.from(files);\n    postFiles.forEach(file => {\n      if (!beforeUpload) {\n        post(file);\n      } else {\n        const result = beforeUpload(file);\n\n        if (result && result instanceof Promise) {\n          result.then(processedFile => {\n            post(processedFile);\n          });\n        } else if (result !== false) {\n          post(file);\n        }\n      }\n    });\n  };\n\n  const post = file => {\n    let _file = {\n      uid: Date.now() + 'upload-file',\n      status: 'ready',\n      name: file.name,\n      size: file.size,\n      percent: 0,\n      raw: file\n    }; //setFileList([_file, ...fileList])\n\n    setFileList(prevList => {\n      return [_file, ...prevList];\n    });\n    const formData = new FormData();\n    formData.append(name || 'file', file);\n\n    if (data) {\n      Object.keys(data).forEach(key => {\n        formData.append(key, data[key]);\n      });\n    }\n\n    axios.post(action, formData, {\n      headers: _objectSpread({}, headers, {\n        'Content-Type': 'multipart/form-data'\n      }),\n      withCredentials,\n      onUploadProgress: e => {\n        let percentage = Math.round(e.loaded * 100 / e.total) || 0;\n\n        if (percentage < 100) {\n          updateFileList(_file, {\n            percent: percentage,\n            status: 'uploading'\n          });\n\n          if (onProgress) {\n            onProgress(percentage, file);\n          }\n        }\n      }\n    }).then(resp => {\n      updateFileList(_file, {\n        status: 'success',\n        response: resp.data\n      });\n\n      if (onSuccess) {\n        onSuccess(resp.data, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    }).catch(err => {\n      updateFileList(_file, {\n        status: 'error',\n        error: err\n      });\n\n      if (onError) {\n        onError(err, file);\n      }\n\n      if (onChange) {\n        onChange(file);\n      }\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"viking-upload-component\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"viking-upload-input\",\n    style: {\n      display: 'inline-block'\n    },\n    onClick: handleClick,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }, drag ? React.createElement(Dragger, {\n    onFile: files => {\n      uploadFiles(files);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, children) : children, React.createElement(\"input\", {\n    className: \"viking-file-input\",\n    style: {\n      display: 'none'\n    },\n    ref: fileInput,\n    onChange: handleFileChange,\n    type: \"file\",\n    accept: accept,\n    multiple: multiple,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  })), React.createElement(UploadList, {\n    fileList: fileList,\n    onRemove: handleRemove,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184\n    },\n    __self: this\n  }));\n};\nUpload.defaultProps = {\n  name: 'file'\n};\nexport default Upload;","map":{"version":3,"sources":["/Users/xhzy/Desktop/vikingship/src/components/Upload/upload.tsx"],"names":["React","useRef","useState","axios","UploadList","Dragger","Upload","props","action","defaultFileList","beforeUpload","onProgress","onSuccess","onError","onChange","onRemove","name","headers","data","withCredentials","accept","multiple","children","drag","fileInput","fileList","setFileList","updateFileList","updateFile","updateObj","prevList","map","file","uid","handleClick","current","click","handleFileChange","e","files","target","uploadFiles","value","handleRemove","filter","item","postFiles","Array","from","forEach","post","result","Promise","then","processedFile","_file","Date","now","status","size","percent","raw","formData","FormData","append","Object","keys","key","onUploadProgress","percentage","Math","round","loaded","total","resp","response","catch","err","error","display","defaultProps"],"mappings":"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","sourcesContent":["import React, { FC, useRef, ChangeEvent, useState } from 'react'\nimport axios from 'axios'\nimport UploadList from './uploadList'\nimport Dragger from './dragger'\nexport type UploadFileStatus = 'ready' | 'uploading' | 'success' | 'error'\nexport interface UploadFile {\n  uid: string;\n  size: number;\n  name: string;\n  status?: UploadFileStatus;\n  percent?: number;\n  raw?: File;\n  response?: any;\n  error?: any;\n}\nexport interface UploadProps {\n  action: string;\n  defaultFileList?: UploadFile[];\n  beforeUpload? : (file: File) => boolean | Promise<File>;\n  onProgress?: (percentage: number, file: File) => void;\n  onSuccess?: (data: any, file: File) => void;\n  onError?: (err: any, file: File) => void;\n  onChange?: (file: File) => void;\n  onRemove?: (file: UploadFile) => void;\n  headers?: {[key: string]: any };\n  name?: string;\n  data?: {[key: string]: any };\n  withCredentials?: boolean;\n  accept?: string;\n  multiple?: boolean;\n  drag?: boolean;\n}\n\nexport const Upload: FC<UploadProps> = (props) => {\n  const {\n    action,\n    defaultFileList,\n    beforeUpload,\n    onProgress,\n    onSuccess,\n    onError,\n    onChange,\n    onRemove,\n    name,\n    headers,\n    data,\n    withCredentials,\n    accept,\n    multiple,\n    children,\n    drag,\n  } = props\n  const fileInput = useRef<HTMLInputElement>(null)\n  const [ fileList, setFileList ] = useState<UploadFile[]>(defaultFileList || [])\n  const updateFileList = (updateFile: UploadFile, updateObj: Partial<UploadFile>) => {\n    setFileList(prevList => {\n      return prevList.map(file => {\n        if (file.uid === updateFile.uid) {\n          return { ...file, ...updateObj }\n        } else {\n          return file\n        }\n      })\n    })\n  }\n  const handleClick = () => {\n    if (fileInput.current) {\n      fileInput.current.click()\n    }\n  }\n  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files\n    if(!files) {\n      return\n    }\n    uploadFiles(files)\n    if (fileInput.current) {\n      fileInput.current.value = ''\n    }\n  }\n  const handleRemove = (file: UploadFile) => {\n    setFileList((prevList) => {\n      return prevList.filter(item => item.uid !== file.uid)\n    })\n    if (onRemove) {\n      onRemove(file)\n    }\n  }\n  const uploadFiles = (files: FileList) => {\n    let postFiles = Array.from(files)\n    postFiles.forEach(file => {\n      if (!beforeUpload) {\n        post(file)\n      } else {\n        const result = beforeUpload(file)\n        if (result && result instanceof Promise) {\n          result.then(processedFile => {\n            post(processedFile)\n          })\n        } else if (result !== false) {\n          post(file)\n        }\n      }\n    })\n  }\n  const post = (file: File) => {\n    let _file: UploadFile = {\n      uid: Date.now() + 'upload-file',\n      status: 'ready',\n      name: file.name,\n      size: file.size,\n      percent: 0,\n      raw: file\n    }\n    //setFileList([_file, ...fileList])\n    setFileList(prevList => {\n      return [_file, ...prevList]\n    })\n    const formData = new FormData()\n    formData.append(name || 'file', file)\n    if (data) {\n      Object.keys(data).forEach(key => {\n        formData.append(key, data[key])\n      })\n    } \n    axios.post(action, formData, {\n      headers: {\n        ...headers,\n        'Content-Type': 'multipart/form-data'\n      },\n      withCredentials,\n      onUploadProgress: (e) => {\n        let percentage = Math.round((e.loaded * 100) / e.total) || 0;\n        if (percentage < 100) {\n          updateFileList(_file, { percent: percentage, status: 'uploading'})\n          if (onProgress) {\n            onProgress(percentage, file)\n          }\n        }\n      }\n    }).then(resp => {\n      updateFileList(_file, {status: 'success', response: resp.data})\n      if (onSuccess) {\n        onSuccess(resp.data, file)\n      }\n      if (onChange) {\n        onChange(file)\n      }\n    }).catch(err => {\n      updateFileList(_file, { status: 'error', error: err})\n      if (onError) {\n        onError(err, file)\n      }\n      if (onChange) {\n        onChange(file)\n      }\n    })\n  }\n\n  return (\n    <div \n      className=\"viking-upload-component\"\n    >\n      <div className=\"viking-upload-input\"\n        style={{display: 'inline-block'}}\n        onClick={handleClick}>\n          {drag ? \n            <Dragger onFile={(files) => {uploadFiles(files)}}>\n              {children}\n            </Dragger>:\n            children\n          }\n        <input\n          className=\"viking-file-input\"\n          style={{display: 'none'}}\n          ref={fileInput}\n          onChange={handleFileChange}\n          type=\"file\"\n          accept={accept}\n          multiple={multiple}\n        />\n      </div>\n\n      <UploadList \n        fileList={fileList}\n        onRemove={handleRemove}\n      />\n    </div>\n  )\n}\n\nUpload.defaultProps = {\n  name: 'file'\n}\nexport default Upload;"]},"metadata":{},"sourceType":"module"}